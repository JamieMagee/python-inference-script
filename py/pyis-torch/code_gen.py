# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT license.

import os
import glob
from shutil import copyfile

this_folder = os.path.dirname(os.path.abspath(__file__))

file_notice = \
'''#################################################################
#              WARNING: Auto-Generated File
#  This file was generated by a tool(py/pyis-torch/code_gen.py)
#  Any changes made to it will be overwritten when regenerated
#################################################################

'''

################################################################################
# copy tests from pyis-python to pyis-torch
################################################################################
tests_src = os.path.normpath(os.path.join(this_folder, '..', 'pyis-python', 'tests'))
tests_dst = os.path.normpath(os.path.join(this_folder, 'tests'))

os.makedirs(tests_dst, exist_ok=True)
for f in glob.iglob(f'{tests_src}{os.sep}**{os.sep}*', recursive=True):
    if os.path.isdir(f):
        continue

    if f.endswith(".pyc"):
        continue
    if "__pycache__" in f.split(os.sep):
        continue
    
    # skip the following tests
    if "test_ort_session" in f.split(os.sep):
        continue
    if "test_pickle" in f.split(os.sep):
        continue
    if "test_foma_fst" in f.split(os.sep):
        continue
      
    dst_file = f'{tests_dst}{f.replace(tests_src, "")}'
    print(f'copy {f} -> {dst_file}')
    os.makedirs(os.path.dirname(dst_file), exist_ok=True)  
    copyfile(f, dst_file)

# replace `pyis.python` with `pyis.torch`
for py_file in glob.iglob(f'{tests_dst}{os.sep}**{os.sep}*.py', recursive=True):
    print(f'processing {py_file}')

    with open(py_file, 'r', encoding="utf8") as f:
        content = f.read()
    
    content = content.replace('pyis.python', 'pyis.torch')
    content = content.replace('class Model:', 'import torch\n\nclass Model(torch.nn.Module):')

    with open(py_file, 'w', encoding="utf8") as f:
        f.write(file_notice)
        f.write(content)

################################################################################
# copy offline from pyis-python to pyis-torch
################################################################################
offline_src = os.path.normpath(os.path.join(this_folder, '..', 'pyis-python', 'pyis', 'python', 'offline'))
offline_dst = os.path.normpath(os.path.join(this_folder, 'pyis', 'torch', 'offline'))

os.makedirs(offline_dst, exist_ok=True)
for f in glob.iglob(f'{offline_src}{os.sep}**{os.sep}*', recursive=True):
    if os.path.isdir(f):
        continue

    if f.endswith(".pyc"):
        continue
    if "__pycache__" in f.split(os.sep):
        continue
          
    dst_file = f'{offline_dst}{f.replace(offline_src, "")}'
    print(f'copy {f} -> {dst_file}')
    os.makedirs(os.path.dirname(dst_file), exist_ok=True)  
    copyfile(f, dst_file)

# replace `pyis.python` with `pyis.torch`
for py_file in glob.iglob(f'{offline_dst}{os.sep}**{os.sep}*.py', recursive=True):
    print(f'processing {py_file}')

    with open(py_file, 'r', encoding="utf8") as f:
        content = f.read()
    
    content = content.replace('pyis.python', 'pyis.torch')

    with open(py_file, 'w', encoding="utf8") as f:
        f.write(file_notice)
        f.write(content)